<div class="container mt-1">
  <!-- Book Details Section -->
  <div class="row">
    <div class="col-md-12">
      <h4 class="mb-4"><b><%= @book.class_name %> = <%= @book.title %> = <%= @book.year %></b></h4>
    </div>
  </div>

  


  <!-- Last Asked Question -->
  <div class="row">
    <div class="col-md-12">
      <div class="card shadow-sm mb-4">
        <div class="card-body">
          <h5 class="card-title"><b>Last Asked Question</b></h5>
          <turbo-frame id="last-question">
            <% if @book.questions.any? %>
              <%= render "last_question", question: @book.questions.last %>
            <% else %>
              <p class="text-muted">No questions have been asked yet.</p>
            <% end %>
          </turbo-frame>
          <%= turbo_stream_from "book_#{@book.id}" %>
        </div>
      </div>
    </div>
  </div>

  <!-- Question Form -->
<div class="row fixed-form">
  <div class="col-md-12">
    <div class="card shadow-sm">
      <div class="card-body">
        <%= form_with(url: question_book_path(@book), method: :post, local: false, id: "question-form", data: { turbo: false }) do |form| %>
          <!-- Textarea for typed or voice-dictated questions -->
          <div class="mb-4">
            <%= form.label :question, "Your Question:", class: "form-label" %>
            <%= form.text_area :question, rows: 3, id: "question-input", class: "form-control" %>
          </div>
          </br>
          <!-- Buttons Section -->
          <div class="d-flex justify-content-start align-items-center">
            <!-- Ask Button -->
            <%= form.submit "Ask", class: "btn btn-primary me-2" %>

            <!-- Start Voice Recognition Button -->
            <button type="button" id="start-voice-btn" class="btn btn-primary me-2">ðŸŽ¤ Start Voice Recognition</button>

            <!-- Stop Voice Recognition Button -->
            <button type="button" id="stop-voice-btn" class="btn btn-primary" style="display: none;">Stop</button>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>


  
</div>

<style>

  .fixed-form {
    position: fixed;
    bottom: 30px;
    width: 100%;
  }
  @media (min-width: 768px) {
  .fixed-form {
    width: 84%; /* Set width to 90% for larger screens */
    margin: 0 auto; /* Center the fixed-form horizontally */
  }
}  
   
  
</style>


<script data-turbo-eval="false">
document.addEventListener("turbo:load", () => {
  /****************************************
   * PART 1: TEXT-TO-SPEECH (Speak Answer)
   ****************************************/
  let isSpeaking = false; // Track whether speech is currently active
  let utterance; // Store the utterance globally to manage stop functionality

  function attachSpeakAnswerListener() {
    const speakButton = document.getElementById("answer-speak-btn");
    const answerTextEl = document.getElementById("answer-text");

    if (speakButton && answerTextEl) {
      // Remove any existing event listeners to avoid duplication
      speakButton.removeEventListener("click", handleSpeakAnswerClick);

      // Add the new event listener
      speakButton.addEventListener("click", handleSpeakAnswerClick);

      function handleSpeakAnswerClick() {
        const answerText = answerTextEl.textContent.trim();

        if (!answerText || answerText === "Processing...") {
          alert("No answer available to speak yet.");
          return;
        }

        if (isSpeaking) {
          // Stop speaking
          window.speechSynthesis.cancel();
          isSpeaking = false;
          speakButton.textContent = "Speak Answer";
        } else {
          // Start speaking
          utterance = new SpeechSynthesisUtterance(answerText);
          utterance.lang = "en-IN";

          // Set Indian English voice if available
          const voices = speechSynthesis.getVoices();
          const inVoice = voices.find((v) => v.lang === "en-IN");
          if (inVoice) utterance.voice = inVoice;

          utterance.onend = () => {
            isSpeaking = false;
            speakButton.textContent = "Speak Answer";
          };

          window.speechSynthesis.speak(utterance);
          isSpeaking = true;
          speakButton.textContent = "Stop Speaking";
        }
      }
    } else {
      console.warn("Speak Answer button or Answer Text element not found.");
    }
  }

  function initializeVoicesAndAttachListener() {
    // Check if voices are already available
    if (speechSynthesis.getVoices().length > 0) {
      attachSpeakAnswerListener();
    } else {
      // If voices are not loaded, wait for the "voiceschanged" event
      speechSynthesis.addEventListener("voiceschanged", () => {
        attachSpeakAnswerListener();
      });
    }
  }

  // Initialize the listener on page load
  initializeVoicesAndAttachListener();

  // Re-attach the listener whenever the Turbo frame is updated
  document.addEventListener("turbo:frame-load", (event) => {
    if (event.target.id === "last-question") {
      initializeVoicesAndAttachListener();
    }
  });
});





  /****************************************
   * PART 2: SPEECH RECOGNITION (Voice Input)
   ****************************************/
document.addEventListener("DOMContentLoaded", () => {
  const SpeechRecognition =
    window.SpeechRecognition || window.webkitSpeechRecognition;

  if (!SpeechRecognition) {
    console.warn("This browser does not support the Web Speech API for recognition.");
  } else {
    const recognition = new SpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = "en-IN";

    const startVoiceBtn = document.getElementById("start-voice-btn");
    const stopVoiceBtn = document.getElementById("stop-voice-btn");
    const questionInput = document.getElementById("question-input");

    if (startVoiceBtn && stopVoiceBtn && questionInput) {
      startVoiceBtn.addEventListener("click", () => {
        recognition.start();
        startVoiceBtn.style.display = "none";
        stopVoiceBtn.style.display = "inline";
      });

      stopVoiceBtn.addEventListener("click", () => {
        recognition.stop();
        stopVoiceBtn.style.display = "none";
        startVoiceBtn.style.display = "inline";
      });

      recognition.onresult = (event) => {
        const speechResult = event.results[0][0].transcript;
        console.log("Speech recognized:", speechResult);

        if (questionInput.value.trim() === "") {
          questionInput.value = speechResult;
        } else {
          questionInput.value += " " + speechResult;
        }
      };

      recognition.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
        stopVoiceBtn.style.display = "none";
        startVoiceBtn.style.display = "inline";
      };

      recognition.onend = () => {
        console.log("Speech recognition ended");
        stopVoiceBtn.style.display = "none";
        startVoiceBtn.style.display = "inline";
      };
    }
  }

  const questionInput = document.getElementById("question-input");

  if (questionInput) {
    questionInput.value = ""; // Clear the question input field after the page reloads
  }
});

</script>
